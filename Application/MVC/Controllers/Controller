/******************************************************************************
** CONTROLLER                                                                **
**                                                                           **
** Lieu      :  ETML                                                         **
** Auteur    :  Grp4                                                         **
** Date      :  04.03.2020                                                   **
**                                                                           **
** Modifications                                                             **
**   Author  :  Jordy Guzman                                                 **
**   Version :  1.0                                                          **
**   Date    :  13.03.2020                                                   **
**   Reasons :  Add a comment header                                         ** 
******************************************************************************/

/******************************************************************************
** SUMMARY                                                                   **
** Send parameters to the model inputted by the user, make the data passed   **
** by the model here be prepared to pass it to the view, control of          **
** exceptions.                                                               **
******************************************************************************/
using System.Data;

public class Controller
    {
        //variable
        private Model _model;
        private View _view;


        /// <summary>
        /// constructeur de Controller
        /// </summary>
        /// <param name="aModel">model</param>
        /// <param name="aView">disigne</param>
        public Controller(Model aModel, View aView)
        {
            this._model = aModel;
            this._view = aView;

            this._model.Ctrler = this;
            this._view.Ctrler = this;
            SetGrid();
        }

        /// <summary>
        /// Receive the predefined choice from the radio button for the specific query
        /// </summary>
        /// <param name="choose"></param>
        public void SpecificQuery(string strSelection)
        {
            switch (strSelection)
            {
                case "Battery":
                    DataTable dtTableSpeQueryBat = _model.SpecificQueryCommandBattery();
                    _view.SetGridView(dtTableSpeQueryBat);
                    break;

                case "OS":
                    DataTable dtTableSpeQueryOpSys = _model.SpecificQueryCommandOpSys();
                    _view.SetGridView(dtTableSpeQueryOpSys);
                    break;

                case "Manufacturer":
                    DataTable dtTableSpeQueryManufacturer = _model.SpecificQueryCommandManufacturer();
                    _view.SetGridView(dtTableSpeQueryManufacturer);
                    break;

                case "Screen":
                    DataTable dtTableSpeQueryScreen = _model.SpecificQueryCommandScreen();
                    _view.SetGridView(dtTableSpeQueryScreen);
                    break;

                case "CPU":
                    DataTable dtTableSpeQueryCpu = _model.SpecificQueryCommandCpu();
                    _view.SetGridView(dtTableSpeQueryCpu);
                    break;

                case "Expensive":
                    DataTable dtTableSpeQueryMostExpensive = _model.SpecificQueryCommandMostExpensive();
                    _view.SetGridView(dtTableSpeQueryMostExpensive);
                    break;

                case "Best":
                    DataTable dtTableSpeQueryTheBest = _model.SpecificQueryCommandTheBest();
                    _view.SetGridView(dtTableSpeQueryTheBest);
                    break;
                case "Cheapest":
                    DataTable dtTableSpeQueryCheapest = _model.SpecificQueryCommandCheapest();
                    _view.SetGridView(dtTableSpeQueryCheapest);
                    break;
                case "PriceEvo":
                    DataTable dtTableSpeQueryPriceEvo = _model.SpecificQueryCommandPriEvo();
                    _view.SetItForImage(dtTableSpeQueryPriceEvo);
                    break;
                default:

                    break;
            }
        }

        /// <summary>
        /// Set the grid at the start of this program, this will return a datatable and adjust the rows and columns in the datagrid
        /// </summary>
        /// <param name=""></param>
        public void SetGrid()
        {
            DataTable dtTable = _model.GetAllInfos();
            _view.SetGridView(dtTable);
        }
    }
